test = """....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#.."""
test2 = """.....
..##.
..#..
.....
..##.
....."""
inp = """...#######...####..#........#.#.##...##.##..#.##.####..####.##.##...###..##
##.###.#...##..#....###..#.##.###.##..##..###..#....##.#..##.####..#.#.#.##
..##.#.###.#......#...#....#...#.#.#...##......####..######.##....#####.##.
##.#####.#.###.####.#....#.....####.#####..##.....#.##...###...#.####..#...
...#.....#.#..#.######.###....#.....#.###..##..#.#.###..##..#.#......#..#..
.###.#.##.##.##.....##.........#....#.#.#..#....###..####..#.#.###..###..#.
.#####.......##.#..#...###.##...#.###...#..##.#.###.......##.#..#..##...##.
.###.#.#.###.#.#..#..###..###..###.########.###..#.##.#.##...##.##.###.#...
.....######.###.###.......####...##.#.##..#.#.##.#....##.###.#.###...###..#
..#..##...#..#...##.#.#..###...#.##.##.##..##.###.#.#..#...#.#..#......####
##..##.##..#.#.##...#.#.#...###.....#....###....#######.#####..#...#.##..##
####....######.#..##...#....#.##....##.#..#.##..##..#.#.....##..####..#....
....####..#.......##...#........#.##..#.#.#.##.##..##.##.....##..#...#.##.#
.####..######.##.#.#.#.##...###..##...######..#.#.#.####.######.#...###....
##..#.#...#.#.#.#.###.#.###.#.#.##.....#..##..##.##...###....#...#.###...#.
#####.##...###..#.#.######..#.###...###..#..###.....#....####..#.####...###
#.#.#....###.##...#.###.#.###.###..###.#.#.....#.##....#.##.##.#####..##..#
...##.#...##....####.#.##.#.####.###...#.##....#..##.###..#......#######.##
....#..#.#.#...##....#.####.##...#..#####...#.##..###..##...#..#.##.#.#.#.#
..#..#####.#..#.#.#..#.###.##...#........#.#.....#.##.....#.##.#..#.#.#.#..
..#.##.###....##.#..#.#####.....#.##.....#.#..###.###..#.#......#..#...#.##
##.#.#...#...#.##..#......###.#.#.####.#...#########.#..#..##...##...##.###
...#.###.#..#######.#.#.##.##..###.##.#.######.#.##.##.##.#########.#...#.#
#..#...##.##.######.#..#.####...####.###.#...##.####..##..#.#...##.#.#.##..
.##.###..#####.###.##..#.#.#.#....#.#....#...#....######.##.#...#...#.#...#
#..#.....##....#.#..##.###..#..####..######...##.#..#######....#.#..##.##..
##...#.##.#...#....#.##.##..#####...##.#.#.#.#...#...#.#....#.##..##..##..#
..##....#..###...#.#.#.##....#...##...###.##.#.....#..#####.#####.....##..#
.#.##..#.#.###..#...###.....##...###..#.#######.#..#.#.##.##..##.#.#..##.##
#.#...#..###..#...####.#.#..##.#..#....#.#.#.###.#.##.##.#.......#.##....##
.#.##.#.#..#.#.#.#.##..#.###..#....#..#...###.#.#.##..#.##..#..#.#..#...###
..#..#.##......#....##.#######..#..##.....#.#.##..#..#..#.#.#..#.#..#.##...
#.#.###.###..######.##....#####.####..#....##.##.##.....##..#..###...##..##
.##..#.#.###..##.....###.#.##.#..#.....#.##..#...#...###...#...##...#####.#
.....#....######..##.#..##..#...##.#.##.#..##...####.##..#.#.####.###......
#..##....#.#.#.#....##..#....##...##.#...###.##..#....#.#...#.#..###...#..#
...###.#.####..##...###.#.##.#..#.####.#.#.#####....####.#.#.#.##...#.##...
.#..##.#...#..##.######.#######.#.#...##...##..#.#.########..#..##.#..###..
..#####.####.#.#.##........###...#..###...##...#...#....####...##.#.#######
#.#####......###.#..###.....##..##...######.#..##.#.#.#######..##.####...#.
#.#.#.#..##..#.##..###....##.#.##.####..#.#####..###......#...#..#..###....
..#...#.##..##.#..#####.######...###...#...##..#.#####..#.###....#..#.#.#..
###..#.#####.##.#.######..##.#####...#...#####.#.#.#.#...#.#.#.#....##....#
#.#...###...#.#...####..........#####..###..#.#...####...#.#.###.#..####.##
..#..##.###.##...####.#....#..##.....####.##.#.#....#..#..##.#..##.#.#..###
..#......##.#.####..###.####..##.####.##...#.#.####.#.#..#..######.##.##.##
....###...#.##.####....#...#.#..#..##.#.####...##...#...#.#.##...##.##..#.#
######....#.#..####.#.#...#####.#.#..##.######.#.###.#.#.#....#...#....##..
....####...#..#.#.#.####.#..#..###..#..#.##.########...#..#.#.........#.#..
##....#.#.##.####.#.#..##.#..##.#.#.#.#.#.#..#######.##..#.##....####...###
##.#.#.##.#...###.#...#...##..#.#.#...#....#...#....#.#..###.##.##...##....
.####....#.##...#.#.#.....#.#.#.#..#.....###.##.#..#...#...###.#..#.#..##.#
##..#.#....##....#.##.##.#.###........#.#..#.#....#.#.###...####..##.####.#
.##.#..###..#.#...###.###.###.###.#.#...##.#.#.###.#.####.###.##...#.#.#...
.#.##.##..#.#.####..##.#####.#..#..####.###..###..####.....###.###.......#.
##.#..#.#..###..#.....#.##.....#.#.#.##..######.#..#.#...#...##..###..##.#.
##..##...#........##..##.######.#.####...#..#..####..#.##.#...#..#.##.#.##.
#..#.##..###.#......####..##.##.#....#.###.##..#.#.#.##.##..#..#.##..##....
.....#....#.#.##..#.##....####.####.....#.###.#.#..#.#.....#..##..##.###...
.#......##....#.##.#...#.#####...##..##.....#.##.##.....#..#..##.#...#####.
##.#...##...#....#.####.#.#....#.#..######..........####.....#.#.#......#..
#.#.#....###..#..####..#.##...##.#####.#...#.#...###...#..##..##.####.#...#
#...###.##.#..#.###..##...##.##..#...##.#....#.#.##.##....#.#....#...#####.
#....##..####.....#.##.#####.#...##..##....#...###...#...#..#.#...#..#...##
#..##.##.....##..#.###..........###...#.#...#..#..##..#...##.####.#....###.
.#....#..#..##.###..########.#......#...#..#..##.##....###.###.....#...##.#
##..###.#....#.#...##.#.###.#.#..#..#..###.#...#.##.#####.#.#..##..#.#..#.#
#.#.#...#....#####.####..#.##.####..#.#.#...#....#..#.###...###.###...#...#
.###..##.#..##..#..#...##.#.#...###..##.#.####.#....#.#...##....#....##..##
..#.##..####.##..##...##..#.###.......#..####.##..#.#......#...##..###.....
##....##.####.####..#.#.#..#####.....###.##..###..####.###.#####..#.....#.#
.####.#..#####.....#..######...##.#....####......######...###..###..#.#.###
.#..#.#.####.#.##........###.#.#.#.##.#..#...#......###.#.##.#..#.#...#...#
.#..#.##....#...#...#.##..#...##.....#..######..##.###...#..#..####..#.#.#.
##.#.#.#..#.##..#.#......#.######..#####...#.##.###.######.#...#.###.##...#"""


inp = inp.split("\n")

from collections import deque ,defaultdict
check = {"N":[(-1,-1),(0,-1),(1,-1)],"S":[(-1,1),(0,1),(1,1)],"W":[(-1,-1),(-1,0),(-1,1)],"E":[(1,-1),(1,0),(1,1)]}
checkorder = deque(["N","S","W","E"])
elves = set()

for y in range(len(inp)):
    for x in range(len(inp[0])):
        if inp[y][x] == "#":
            elves.add((x,y))
#print(elves)

def add(a,b):
    return a[0]+b[0] , a[1]+b[1]

def findminmax(elves):
    mx = -float('inf')
    my = -float('inf')  
    mix = float('inf')  
    miy = float('inf')  
    for x , y in elves:
        if x < mix: mix = x
        if x > mx: mx = x
        if y < miy: miy = y
        if y > my: my = y
    return mx ,mix , my ,miy

def piirra(elves):
    mx ,mix , my ,miy = findminmax(elves)

    for i in range(miy,my+1):
        for j in range(mix,mx+1):
            if (j,i) in elves:
                print("#",end="")
            else:
                print(".",end="")
        print()

for round in range(1000000):
    #piirra(elves)
    #print(round + 1)
    elvesToMove = set()
    elvesToStay = set()
    destinations = defaultdict(list)
    for elf in elves:
        move = False
        for i in range(-1,2):
            for j in range(-1,2):
                if (i,j) == (0,0):
                    continue
                if add(elf,(i,j)) in elves:
                    move = True
                    elvesToMove.add(elf)
                    break
            if move: break
        if not move:
            elvesToStay.add(elf)

    print(len(elvesToMove))
    if len(elvesToMove) == 0:
        print("round" , round + 1)
        break
    for elf in elvesToMove:
        for c in checkorder:
            a1 = add(elf,check[c][0])
            a2 = add(elf,check[c][1])
            a3 = add(elf,check[c][2])
            if (a1 in elves) or (a2 in elves) or (a3 in elves):
                if c == checkorder[-1]:
                    destinations[elf].append(elf)
                continue
            destinations[a2].append(elf)
            break

    nextPos = set()

    for p in destinations:
        if len(destinations[p]) == 1:
            nextPos.add(p)
        else:
            for i in destinations[p]:
                nextPos.add(i)
    elves = elvesToStay | nextPos
    checkorder.rotate(-1)
    #print(elves)
#piirra(elves)
#mx ,mix , my ,miy = findminmax(elves)
#print((mx-mix),(my-miy),len(elves))
#print((mx-mix+1)*(my-miy+1)-len(elves))    